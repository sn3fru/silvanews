#!/usr/bin/env python3
"""
Script para aplicar √≠ndices de performance no banco de dados.
Executa ap√≥s as mudan√ßas no modelo de dados para otimizar queries.
"""

import sys
from pathlib import Path

# Adiciona o diret√≥rio backend ao path
backend_dir = Path(__file__).parent / "backend"
sys.path.insert(0, str(backend_dir))

from backend.database import engine, Base, ArtigoBruto, ClusterEvento
from sqlalchemy import text

def aplicar_indices_performance():
    """Aplica √≠ndices de performance no banco de dados."""
    print("üîß Aplicando √≠ndices de performance no banco de dados...")
    
    try:
        # Lista de √≠ndices para criar
        indices = [
            # √çndices para ArtigoBruto
            "CREATE INDEX IF NOT EXISTS idx_artigos_created_date ON artigos_brutos (created_at)",
            "CREATE INDEX IF NOT EXISTS idx_artigos_processed_date ON artigos_brutos (processed_at)",
            "CREATE INDEX IF NOT EXISTS idx_artigos_cluster_date ON artigos_brutos (cluster_id, created_at)",
            "CREATE INDEX IF NOT EXISTS idx_artigos_status_date ON artigos_brutos (status, created_at)",
            "CREATE INDEX IF NOT EXISTS idx_artigos_tag_date ON artigos_brutos (tag, created_at)",
            
            # √çndices para ClusterEvento
            "CREATE INDEX IF NOT EXISTS idx_clusters_created_date ON clusters_eventos (created_at)",
            "CREATE INDEX IF NOT EXISTS idx_clusters_updated_date ON clusters_eventos (updated_at)",
            "CREATE INDEX IF NOT EXISTS idx_clusters_tag_date ON clusters_eventos (tag, created_at)",
            "CREATE INDEX IF NOT EXISTS idx_clusters_prioridade_date ON clusters_eventos (prioridade, created_at)",
            
            # √çndices compostos para queries frequentes
            "CREATE INDEX IF NOT EXISTS idx_artigos_status_processed ON artigos_brutos (status, processed_at)",
            "CREATE INDEX IF NOT EXISTS idx_clusters_status_prioridade ON clusters_eventos (status, prioridade)",
        ]
        
        # Executa cada √≠ndice
        with engine.connect() as conn:
            for i, index_sql in enumerate(indices, 1):
                try:
                    print(f"  [{i}/{len(indices)}] Aplicando √≠ndice...")
                    conn.execute(text(index_sql))
                    conn.commit()
                    print(f"    ‚úÖ √çndice aplicado com sucesso")
                except Exception as e:
                    print(f"    ‚ö†Ô∏è Aviso ao aplicar √≠ndice: {e}")
                    # Continua mesmo se um √≠ndice falhar
        
        print("üéâ √çndices de performance aplicados com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao aplicar √≠ndices: {e}")
        return False

def verificar_indices():
    """Verifica se os √≠ndices foram aplicados corretamente."""
    print("\nüîç Verificando √≠ndices aplicados...")
    
    try:
        with engine.connect() as conn:
            # Verifica √≠ndices da tabela artigos_brutos
            result = conn.execute(text("""
                SELECT indexname, indexdef 
                FROM pg_indexes 
                WHERE tablename = 'artigos_brutos' 
                AND indexname LIKE 'idx_artigos_%'
                ORDER BY indexname
            """))
            
            indices_artigos = result.fetchall()
            print(f"  üìä √çndices em artigos_brutos: {len(indices_artigos)}")
            for idx in indices_artigos:
                print(f"    ‚úÖ {idx[0]}")
            
            # Verifica √≠ndices da tabela clusters_eventos
            result = conn.execute(text("""
                SELECT indexname, indexdef 
                FROM pg_indexes 
                WHERE tablename = 'clusters_eventos' 
                AND indexname LIKE 'idx_clusters_%'
                ORDER BY indexname
            """))
            
            indices_clusters = result.fetchall()
            print(f"  üìä √çndices em clusters_eventos: {len(indices_clusters)}")
            for idx in indices_clusters:
                print(f"    ‚úÖ {idx[0]}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar √≠ndices: {e}")
        return False

def analisar_performance():
    """Analisa a performance das queries principais."""
    print("\nüìà Analisando performance das queries...")
    
    try:
        with engine.connect() as conn:
            # Query 1: Contagem de artigos por data
            print("  üîç Testando query de contagem por data...")
            result = conn.execute(text("""
                EXPLAIN (ANALYZE, BUFFERS) 
                SELECT COUNT(*) FROM artigos_brutos 
                WHERE DATE(created_at) = CURRENT_DATE
            """))
            
            # Query 2: Clusters com artigos de hoje
            print("  üîç Testando query de clusters por data...")
            result = conn.execute(text("""
                EXPLAIN (ANALYZE, BUFFERS) 
                SELECT DISTINCT c.* FROM clusters_eventos c
                JOIN artigos_brutos a ON c.id = a.cluster_id
                WHERE DATE(a.created_at) = CURRENT_DATE
                AND c.status = 'ativo'
            """))
            
            print("  ‚úÖ An√°lise de performance conclu√≠da")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na an√°lise de performance: {e}")
        return False

def main():
    """Fun√ß√£o principal."""
    print("üöÄ Otimiza√ß√£o de Performance - BTG AlphaFeed")
    print("=" * 50)
    
    # Aplica √≠ndices
    if not aplicar_indices_performance():
        print("‚ùå Falha ao aplicar √≠ndices")
        return 1
    
    # Verifica √≠ndices
    if not verificar_indices():
        print("‚ùå Falha ao verificar √≠ndices")
        return 1
    
    # Analisa performance
    if not analisar_performance():
        print("‚ùå Falha na an√°lise de performance")
        return 1
    
    print("\nüéâ Otimiza√ß√£o conclu√≠da com sucesso!")
    print("\nüìã Melhorias implementadas:")
    print("  ‚úÖ √çndices por data para queries r√°pidas")
    print("  ‚úÖ √çndices compostos para filtros complexos")
    print("  ‚úÖ Pagina√ß√£o no frontend (20 itens por p√°gina)")
    print("  ‚úÖ Carregamento lazy de textos completos")
    print("  ‚úÖ Modal para detalhes sob demanda")
    print("  ‚úÖ Scroll infinito para melhor UX")
    
    print("\nüöÄ Como usar:")
    print("  python load_news.py                    # Carrega not√≠cias")
    print("  python process_articles.py             # Processa e agrupa")
    print("  python start_dev.py                    # Inicia o servidor")
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 