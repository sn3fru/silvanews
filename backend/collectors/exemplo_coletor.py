"""
Exemplo de coletor para o BTG AlphaFeed.
Demonstra como criar um coletor que envia dados para a API.
"""

import requests
import hashlib
import time
from typing import Dict, Any, List
from datetime import datetime


class ExemploColetor:
    """
    Exemplo de coletor que simula a coleta de not√≠cias.
    Em um cen√°rio real, este seria um coletor de Telegram, RSS, ou web scraping.
    """
    
    def __init__(self, api_base_url: str = "http://localhost:8000"):
        self.api_base_url = api_base_url
        self.session = requests.Session()
    
    def gerar_hash_artigo(self, texto: str, url: str = "") -> str:
        """Gera hash √∫nico para o artigo."""
        conteudo = f"{texto}{url}"
        return hashlib.sha256(conteudo.encode('utf-8')).hexdigest()
    
    def enviar_artigo(self, texto_bruto: str, url_original: str = None, metadados: Dict[str, Any] = None) -> bool:
        """
        Envia um artigo para a API para processamento.
        
        Args:
            texto_bruto: Texto completo do artigo
            url_original: URL original (opcional)
            metadados: Metadados adicionais (opcional)
            
        Returns:
            True se enviado com sucesso, False caso contr√°rio
        """
        try:
            # Gera hash √∫nico
            hash_unico = self.gerar_hash_artigo(texto_bruto, url_original or "")
            
            # Prepara dados
            dados_artigo = {
                "hash_unico": hash_unico,
                "texto_bruto": texto_bruto,
                "url_original": url_original,
                "fonte_coleta": "exemplo_coletor",
                "metadados": metadados or {}
            }
            
            # Envia para API
            response = self.session.post(
                f"{self.api_base_url}/internal/novo-artigo",
                json=dados_artigo,
                timeout=30
            )
            
            if response.status_code == 200:
                resultado = response.json()
                print(f"‚úÖ Artigo enviado: {resultado['message']}")
                return True
            else:
                print(f"‚ùå Erro ao enviar artigo: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro de conex√£o: {e}")
            return False
    
    def coletar_noticias_exemplo(self) -> List[Dict[str, Any]]:
        """
        Simula a coleta de not√≠cias.
        Em um cen√°rio real, esta fun√ß√£o faria scraping, consultaria APIs, etc.
        """
        noticias_exemplo = [
            {
                "texto": """
                BTG Pactual anuncia aquisi√ß√£o de fintech de cr√©dito
                
                O BTG Pactual anunciou hoje a aquisi√ß√£o da fintech de cr√©dito TechCredit por R$ 500 milh√µes. 
                A opera√ß√£o faz parte da estrat√©gia do banco de expandir sua atua√ß√£o no segmento de tecnologia 
                financeira e democratizar o acesso ao cr√©dito.
                
                Segundo Roberto Sallouti, CEO do BTG, a aquisi√ß√£o permitir√° ao banco oferecer solu√ß√µes mais 
                inovadoras e √°geis para clientes corporativos e pessoas f√≠sicas. A TechCredit possui uma 
                carteira de cr√©dito de R$ 2 bilh√µes e atende mais de 100 mil clientes.
                
                A transa√ß√£o ainda depende de aprova√ß√£o do Banco Central e deve ser conclu√≠da no primeiro 
                trimestre de 2025.
                """,
                "url": "https://exemplo.com/btg-aquisicao-fintech",
                "metadados": {
                    "fonte_original": "Valor Econ√¥mico",
                    "data_coleta": datetime.now().isoformat(),
                    "palavras_chave": ["BTG Pactual", "aquisi√ß√£o", "fintech", "cr√©dito"]
                }
            },
            {
                "texto": """
                Americanas obt√©m aprova√ß√£o para novo plano de recupera√ß√£o judicial
                
                A Americanas S.A. teve seu novo plano de recupera√ß√£o judicial aprovado pela 4¬™ Vara Empresarial 
                do Rio de Janeiro. O plano prev√™ a convers√£o de R$ 15 bilh√µes em d√≠vidas para capital e um 
                aporte de R$ 8 bilh√µes dos acionistas controladores.
                
                O juiz respons√°vel destacou que o plano apresenta viabilidade econ√¥mica e garante a manuten√ß√£o 
                de empregos. A empresa dever√° vender suas opera√ß√µes de marketplace e focar no varejo f√≠sico.
                
                As a√ß√µes da empresa subiram 12% na B3 ap√≥s o an√∫ncio da aprova√ß√£o.
                """,
                "url": "https://exemplo.com/americanas-recuperacao-aprovada",
                "metadados": {
                    "fonte_original": "Estad√£o",
                    "data_coleta": datetime.now().isoformat(),
                    "palavras_chave": ["Americanas", "recupera√ß√£o judicial", "aprova√ß√£o"]
                }
            },
            {
                "texto": """
                Banco Central mant√©m Selic em 10,75% e sinaliza pausa
                
                O Comit√™ de Pol√≠tica Monet√°ria (Copom) do Banco Central decidiu manter a taxa Selic em 10,75% 
                ao ano, conforme esperado pelo mercado. A decis√£o foi un√¢nime e marca a terceira reuni√£o 
                consecutiva sem altera√ß√£o na taxa b√°sica de juros.
                
                Em comunicado, o BC sinalizou que deve manter a taxa est√°vel nas pr√≥ximas reuni√µes, dependendo 
                da evolu√ß√£o dos dados de infla√ß√£o e atividade econ√¥mica. O IPCA acumulado em 12 meses est√° 
                em 4,2%, dentro da meta de infla√ß√£o.
                
                O mercado reagiu positivamente, com o d√≥lar fechando em queda de 0,8%.
                """,
                "url": "https://exemplo.com/bc-mantem-selic",
                "metadados": {
                    "fonte_original": "Folha de S.Paulo",
                    "data_coleta": datetime.now().isoformat(),
                    "palavras_chave": ["Banco Central", "Selic", "juros", "infla√ß√£o"]
                }
            }
        ]
        
        return noticias_exemplo
    
    def executar_coleta(self):
        """Executa um ciclo completo de coleta."""
        print("üîÑ Iniciando coleta de exemplo...")
        
        # Simula coleta de not√≠cias
        noticias = self.coletar_noticias_exemplo()
        
        # Envia cada not√≠cia para a API
        sucessos = 0
        for i, noticia in enumerate(noticias, 1):
            print(f"\nüì∞ Enviando not√≠cia {i}/{len(noticias)}...")
            
            if self.enviar_artigo(
                texto_bruto=noticia["texto"],
                url_original=noticia["url"],
                metadados=noticia["metadados"]
            ):
                sucessos += 1
                # Aguarda um pouco entre envios
                time.sleep(1)
        
        print(f"\n‚úÖ Coleta finalizada: {sucessos}/{len(noticias)} not√≠cias enviadas com sucesso")
    
    def verificar_api_status(self) -> bool:
        """Verifica se a API est√° funcionando."""
        try:
            response = self.session.get(f"{self.api_base_url}/health", timeout=10)
            if response.status_code == 200:
                status = response.json()
                print(f"‚úÖ API Status: {status['status']}")
                return True
            else:
                print(f"‚ùå API n√£o est√° saud√°vel: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Erro ao verificar API: {e}")
            return False


def main():
    """Fun√ß√£o principal para teste do coletor."""
    print("=" * 60)
    print("üì° BTG AlphaFeed - Exemplo de Coletor")
    print("=" * 60)
    
    # Cria inst√¢ncia do coletor
    coletor = ExemploColetor()
    
    # Verifica status da API
    if not coletor.verificar_api_status():
        print("\n‚ùå API n√£o est√° dispon√≠vel. Verifique se o backend est√° rodando.")
        return
    
    # Pergunta se deve executar a coleta
    executar = input("\nüöÄ Executar coleta de exemplo? (s/N): ").lower().strip()
    if executar in ['s', 'sim', 'yes', 'y']:
        coletor.executar_coleta()
    else:
        print("Coleta cancelada pelo usu√°rio.")
    
    print("\n" + "=" * 60)
    print("üí° Este √© apenas um exemplo. Em produ√ß√£o, voc√™ implementaria:")
    print("   - Conex√£o com fontes reais (Telegram, RSS, etc.)")
    print("   - Tratamento de erros robusto")
    print("   - Agendamento autom√°tico (cron, APScheduler)")
    print("   - Monitoramento e logs detalhados")
    print("=" * 60)


if __name__ == "__main__":
    main()